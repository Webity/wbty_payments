<?php
/**
 * @package    WBTY Payments
 *
 * @copyright  Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

defined('JPATH_PLATFORM') or die;

require_once(dirname(__FILE__) .DS. "WBTYPaymentsGatewayModel.php");

class WBTYPaymentsPaypal_pro extends WBTYPaymentsGatewayModel {

	function __construct($properties = null) {

		// Call the function to get the merchant and post data
		$this->info = parent::getGateway();

		/**
		# API user: The user that is identified as making the call. you can
		# also use your own API username that you created on PayPalï¿½s sandbox
		# or the PayPal live site
		*/
		$this->API_UserName=$this->info['merchant']['api_username'];


		/**
		# API_password: The password associated with the API user
		# If you are using your own API username, enter the API password that
		# was generated by PayPal below
		# IMPORTANT - HAVING YOUR API PASSWORD INCLUDED IN THE MANNER IS NOT
		# SECURE, AND ITS ONLY BEING SHOWN THIS WAY FOR TESTING PURPOSES
		*/
		$this->API_Password=$this->info['merchant']['api_password'];

		/**
		# API_Signature:The Signature associated with the API user. which is generated by paypal.
		*/
		$this->API_Signature=$this->info['merchant']['api_signature'];

		/**
		# Version: this is the API version in the request.
		# It is a mandatory parameter for each API request.
		# The only supported value at this time is 2.3
		*/
		$this->version=2.3;

		$this->subject = '';

		// below three are needed if used permissioning
		$this->AUTH_token='';

		$this->AUTH_signature='';

		$this->AUTH_timestamp='';

		$this->USE_PROXY = FALSE;

		/**
		# PROXY_HOST and PROXY_PORT will be read only if USE_PROXY is set to TRUE

		$this->PROXY_HOST = 127.0.0.1;
		$this->PROXY_PORT = 808;
		*/

		/* Define the PayPal URL. This is the URL that the buyer is
		   first sent to to authorize payment with their paypal account
		   change the URL depending if you are testing on the sandbox
		   or going to the live PayPal site
		   For the sandbox, the URL is
		   https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=
		   For the live site, the URL is
		   https://www.paypal.com/webscr&cmd=_express-checkout&token=
		   */
		if ($this->info['merchant']['type'] == 0) {
			$this->PAYPAL_URL = 'https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=';

			/**
			# Endpoint: this is the server URL which you have to connect for submitting your API request.
			*/
			$this->API_Endpoint ='https://api-3t.sandbox.paypal.com/nvp';
		} else {
			$this->PAYPAL_URL = 'https://www.paypal.com/webscr&cmd=_express-checkout&token=';

			/**
			# Endpoint: this is the server URL which you have to connect for submitting your API request.
			*/
			$this->API_Endpoint ='https://api-3t.paypal.com/nvp';
		}

		// Ack related constants
		$this->ACK_SUCCESS = 'SUCCESS';
		$this->ACK_SUCCESS_WITH_WARNING = 'SUCCESSWITHWARNING';

		parent::__construct($properties);
	}


	function process_cc() {

		/**
		 * Get required parameters from the web form for the request
		 */
		$paymentType =urlencode( $_POST['paymentType']);
		$firstName =urlencode($this->info['post']['firstName']);
		$lastName =urlencode($this->info['post']['lastName']);
		$creditCardType =urlencode($this->info['post']['creditCardType']);
		$creditCardNumber = urlencode($this->info['post']['creditCardNumber']);
		$expDateMonth =urlencode($this->info['post']['expDateMonth']);

		// Month must be padded with leading zero
		$padDateMonth = str_pad($expDateMonth, 2, '0', STR_PAD_LEFT);

		$expDateYear =urlencode($this->info['post']['expDateYear']);
		$cvv2Number = urlencode($this->info['post']['cvv2Number']);
		$address1 = urlencode($this->info['post']['address1']);
		$address2 = urlencode($this->info['post']['address2']);
		$city = urlencode($this->info['post']['city']);
		$state =urlencode($this->info['post']['state']);
		$zip = urlencode($this->info['post']['zip']);
		$amount = urlencode($this->info['post']['amount']);
		// $currencyCode=urlencode($_POST['currency']);
		$currencyCode="USD";
		// Hardcoding sale. Other possible variables are Authorization and Sale.
		// $paymentType=urlencode($_POST['paymentType']);
		$paymentType="sale";

		/* Construct the request string that will be sent to PayPal.
		   The variable $nvpstr contains all the variables and is a
		   name value pair string with & as a delimiter */
		$nvpstr="&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber&EXPDATE=".         $padDateMonth.$expDateYear."&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName&STREET=$address1&CITY=$city&STATE=$state".
		"&ZIP=$zip&COUNTRYCODE=US&CURRENCYCODE=$currencyCode";



		/* Make the API call to PayPal, using API signature.
		   The API response is stored in an associative array called $resArray */
		$resArray=$this->hash_call("doDirectPayment",$nvpstr);

		/* Display the API response back to the browser.
		   If the response from PayPal was a success, display the response parameters'
		   If the response was an error, display the errors received using APIError.php.
		   */
		$ack = strtoupper($resArray["ACK"]);

		if($ack!="SUCCESS")  {
			$_SESSION['reshash']=$resArray;
			$this->APIerror();
			//$location = "APIError.php";
				 //header("Location: $location");
				 return false;
		 }

		return true;
	}


	/**
	  * hash_call: Function to perform the API call to PayPal using API signature
	  * @methodName is name of API  method.
	  * @nvpStr is nvp string.
	  * returns an associtive array containing the response from the server.
	*/
	function hash_call($methodName,$nvpStr)
	{
		session_start();
		// form header string
		$nvpheader=$this->nvpHeader();
		//setting the curl parameters.
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL,$this->API_Endpoint);
		curl_setopt($ch, CURLOPT_VERBOSE, 1);

		//turning off the server and peer verification(TrustManager Concept).
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);

		curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
		curl_setopt($ch, CURLOPT_POST, 1);

		//in case of permission APIs send headers as HTTPheders
		if(!empty($this->AUTH_token) && !empty($this->AUTH_signature) && !empty($this->AUTH_timestamp))
		 {
			$headers_array[] = "X-PP-AUTHORIZATION: ".$nvpheader;

		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers_array);
		curl_setopt($ch, CURLOPT_HEADER, false);
		}
		else
		{
			$nvpStr=$nvpheader.$nvpStr;
		}
		//if USE_PROXY constant set to TRUE in Constants.php, then only proxy will be enabled.
	   //Set proxy name to PROXY_HOST and port number to PROXY_PORT in constants.php
		if($this->USE_PROXY == TRUE)
		curl_setopt ($ch, CURLOPT_PROXY, $this->PROXY_HOST.":".$this->PROXY_PORT);

		//check if version is included in $nvpStr else include the version.
		if(strlen(str_replace('VERSION=', '', strtoupper($nvpStr))) == strlen($nvpStr)) {
			$nvpStr = "&VERSION=" . urlencode($this->version) . $nvpStr;
		}

		$nvpreq="METHOD=".urlencode($methodName).$nvpStr;

		//setting the nvpreq as POST FIELD to curl
		curl_setopt($ch,CURLOPT_POSTFIELDS,$nvpreq);

		//getting response from server
		$response = curl_exec($ch);

		 if (curl_errno($ch) == 60) {

			curl_setopt($ch, CURLOPT_CAINFO,
			dirname(__FILE__) . '/cacert.pem');
			$response = curl_exec($ch);
		}

		//convrting NVPResponse to an Associative Array
		$nvpResArray=$this->deformatNVP($response);
		$nvpReqArray=$this->deformatNVP($nvpreq);
		$_SESSION['nvpReqArray']=$nvpReqArray;

		if (curl_errno($ch)) {
			// moving to display page to display curl errors
			  $_SESSION['curl_error_no']=curl_errno($ch) ;
			  $_SESSION['curl_error_msg']=curl_error($ch);
			  $this->APIerror();
			  //$location = "APIError.php";
			  //header("Location: $location");
		 } else {
			 //closing the curl
				curl_close($ch);
		  }

		return $nvpResArray;
	}



	function nvpHeader()
	{

		$nvpHeaderStr = "";

		if(defined('AUTH_MODE')) {
			//$AuthMode = "3TOKEN"; //Merchant's API 3-TOKEN Credential is required to make API Call.
			//$AuthMode = "FIRSTPARTY"; //Only merchant Email is required to make EC Calls.
			//$AuthMode = "THIRDPARTY";Partner's API Credential and Merchant Email as Subject are required.
			$AuthMode = "AUTH_MODE";
		}
		else {

			if((!empty($this->API_UserName)) && (!empty($this->API_Password)) && (!empty($this->API_Signature)) && (!empty($this->subject))) {
				$AuthMode = "THIRDPARTY";
			}

			else if((!empty($this->API_UserName)) && (!empty($this->API_Password)) && (!empty($this->API_Signature))) {
				$AuthMode = "3TOKEN";
			}

			elseif (!empty($this->AUTH_token) && !empty($this->AUTH_signature) && !empty($this->AUTH_timestamp)) {
				$AuthMode = "PERMISSION";
			}
			elseif(!empty($this->subject)) {
				$AuthMode = "FIRSTPARTY";
			}
		}

		switch($AuthMode) {

			case "3TOKEN" :
					$nvpHeaderStr = "&PWD=".urlencode($this->API_Password)."&USER=".urlencode($this->API_UserName)."&SIGNATURE=".urlencode($this->API_Signature);
					break;
			case "FIRSTPARTY" :
					$nvpHeaderStr = "&SUBJECT=".urlencode($this->subject);
					break;
			case "THIRDPARTY" :
					$nvpHeaderStr = "&PWD=".urlencode($this->API_Password)."&USER=".urlencode($this->API_UserName)."&SIGNATURE=".urlencode($this->API_Signature)."&SUBJECT=".urlencode($this->subject);
					break;
			case "PERMISSION" :
					$nvpHeaderStr = formAutorization($this->AUTH_token,$this->AUTH_signature,$this->AUTH_timestamp);
					break;
		}
		return $nvpHeaderStr;
	}




	/** This function will take NVPString and convert it to an Associative Array and it will decode the response.
	  * It is usefull to search for a particular key and displaying arrays.
	  * @nvpstr is NVPString.
	  * @nvpArray is Associative Array.
	  */

	function deformatNVP($nvpstr)
	{

		$intial=0;
		$nvpArray = array();


		while(strlen($nvpstr)){
			//postion of Key
			$keypos= strpos($nvpstr,'=');
			//position of value
			$valuepos = strpos($nvpstr,'&') ? strpos($nvpstr,'&'): strlen($nvpstr);

			/*getting the Key and Value values and storing in a Associative Array*/
			$keyval=substr($nvpstr,$intial,$keypos);
			$valval=substr($nvpstr,$keypos+1,$valuepos-$keypos-1);
			//decoding the respose
			$nvpArray[urldecode($keyval)] =urldecode( $valval);
			$nvpstr=substr($nvpstr,$valuepos+1,strlen($nvpstr));
		 }
		return $nvpArray;
	}


	function formAutorization($AUTH_token,$AUTH_signature,$AUTH_timestamp)
	{
		$authString="token=".$AUTH_token.",signature=".$AUTH_signature.",timestamp=".$AUTH_timestamp;
		return $authString;
	}



	function APIerror() {

		// Get order_id from session data
		$session = JFactory::getSession();

		$order_id = $session->get('wbtypayments.order_id', 0);

		// Initialize database
		$db = JFactory::getDBO();

		session_start();
		$resArray=$_SESSION['reshash'];

		// Get any URL errors
		if(isset($_SESSION['curl_error_no'])) {
			$errorCode= $_SESSION['curl_error_no'] ;
			$errorMessage=$_SESSION['curl_error_msg'] ;
			session_unset();
		} else {
			// Create a new row in the errors table with this order ID
			$query = "INSERT INTO #__wbty_payments_errors (`number`,`message`,`order_id`) VALUES ('".$resArray['L_ERRORCODE0']."','".$resArray['L_LONGMESSAGE0']."','$order_id')";
			$db->setQuery($query);
			$db->query();
			$error_id = $db->insertid();

			foreach($resArray as $key => $value) {
				switch ($key) {
					case 'L_ERRORCODE0':
						break;
					case 'L_LONGMESSAGE0':
						break;
					default:
						$query = "INSERT INTO #__wbty_payments_error_extra_items (`error_id`,`name`,`value`) VALUES ('".$error_id."','".$key."','".$value."')";
						$db->setQuery($query);
						$db->query();
				}
			}
		}

	}

	function setPaid() {
		parent::setPaid();
	}

}
